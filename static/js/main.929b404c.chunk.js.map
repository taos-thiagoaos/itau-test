{"version":3,"sources":["core/helpers/formatDate.js","core/helpers/formatHour.js","styles.js","core/api.js","components/TweetList.js","components/TopFiveFollowersUsersList.js","AppRouter.js","components/Footer.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["date","Intl","DateTimeFormat","year","month","day","formatHour","hour","toString","padStart","useStyles","makeStyles","theme","logoIcon","marginRight","spacing","title","flexGrow","textDecoration","mainContainer","paddingTop","paddingBottom","footer","backgroundColor","palette","background","paper","padding","doFetch","resourcePath","fetch","process","headers","Content-Type","Authorization","api","getTop5Followers","getTweetsGroupByTagLang","getTweetsGroupByHour","TweetList","classes","_useState","useState","_useState2","Object","slicedToArray","tweetsByTagLang","setTweetsByTagLang","_useState3","_useState4","tweetsByHour","setTweetsByHour","useEffect","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","json","then","data","catch","err","console","log","newData","map","tweet","assign","Date","stop","apply","this","arguments","fetchData","react_default","createElement","Grid","container","item","xs","Paper","className","Table","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","key","tag","component","scope","lang","total","formatDate","TopFiveFollowersUsersList","users","setUsers","root","user","name","followers","AppRouter","react_router","exact","path","Footer","Typography","variant","color","NavigationBar","AppBar","position","Toolbar","IconButton","Link","to","Home_default","noWrap","Button","size","App","Fragment","react_router_dom","CssBaseline","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.929b404c.chunk.js","sourcesContent":["const date = new Intl.DateTimeFormat('pt-BR', {\n  year: 'numeric',\n  month: 'long',\n  day: '2-digit'\n});\n\nexport default date.format;\n","export default (hour) => {\n  return hour.toString().padStart(2, '0') + ':00';\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  logoIcon: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    textDecoration: 'none'\n  },\n  mainContainer: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nexport default useStyles;\n","const basePath = process.env.REACT_APP_API_ENDPOINT;\nconst doFetch = (resourcePath) => {\n  return fetch(basePath + resourcePath, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + process.env.REACT_APP_ACCESS_TOKEN\n    },\n  })\n}\n\nexport default {\n  getTop5Followers: () => doFetch('/users/top-5-followers'),\n  getTweetsGroupByTagLang: () => doFetch('/tweets/total-by-tag-lang'),\n  getTweetsGroupByHour: () => doFetch('/tweets/total-by-hour')\n}\n","import Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport formatDate from 'core/helpers/formatDate';\nimport formatHour from 'core/helpers/formatHour';\nimport React, { useEffect, useState } from 'react';\nimport useStyles from 'styles';\nimport api from 'core/api';\n\nexport function TweetList() {\n  const classes = useStyles();\n\n  const [tweetsByTagLang, setTweetsByTagLang] = useState([]);\n  const [tweetsByHour, setTweetsByHour] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const resTweetsByTagLang = await api.getTweetsGroupByTagLang();\n      resTweetsByTagLang.json()\n        .then(data => setTweetsByTagLang(data))\n        .catch(err => console.log(err));\n\n      const resTweetsByHour = await api.getTweetsGroupByHour();\n      resTweetsByHour.json()\n        .then(data => {\n          const newData = data.map((tweet) => Object.assign({}, tweet, { date: new Date(tweet.date)}));\n\n          setTweetsByHour(newData)\n        })\n        .catch(err => console.log(err));\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={6}>\n        <Paper className={classes.paper}>\n          <Table className={classes.table} aria-label=\"Tweets Por Tag e Idioma\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Tag</TableCell>\n                <TableCell align=\"right\">Idioma</TableCell>\n                <TableCell align=\"right\">Total</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tweetsByTagLang.map(tweet => (\n                <TableRow key={tweet.tag}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {tweet.tag}\n                  </TableCell>\n                  <TableCell align=\"right\">{tweet.lang}</TableCell>\n                  <TableCell align=\"right\">{tweet.total}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Paper>\n      </Grid>\n      <Grid item xs={6}>\n      <Paper className={classes.paper}>\n          <Table className={classes.table} aria-label=\"Tweets por Dia e Hora\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Dia</TableCell>\n                <TableCell align=\"right\">Hora</TableCell>\n                <TableCell align=\"right\">Total</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tweetsByHour.map(tweet => (\n                <TableRow key={tweet.date}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {formatDate(tweet.date)}\n                  </TableCell>\n                  <TableCell align=\"right\">{formatHour(tweet.hour)}</TableCell>\n                  <TableCell align=\"right\">{tweet.total}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\n","import Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport React, { useEffect, useState } from 'react';\nimport useStyles from 'styles';\nimport api from 'core/api';\n\n\nexport function TopFiveFollowersUsersList() {\n  const classes = useStyles();\n\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await api.getTop5Followers();\n      res.json()\n        .then(data => setUsers(data))\n        .catch(err => console.log(err));\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"top five users table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Usuário</TableCell>\n            <TableCell align=\"right\">Seguidores</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {users.map(user => (\n            <TableRow key={user.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {user.name}\n              </TableCell>\n              <TableCell align=\"right\">{user.followers}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { TweetList } from 'components/TweetList';\nimport { TopFiveFollowersUsersList } from 'components/TopFiveFollowersUsersList';\n\nexport function AppRouter() {\n  return (\n    <div>\n      <Route exact path=\"/\" component={TopFiveFollowersUsersList} />\n      <Route path=\"/tweets\" component={TweetList} />\n    </div>\n  );\n}\n","import React from 'react';\nimport useStyles from 'styles';\nimport { Typography } from '@material-ui/core';\n\nexport function Footer() {\n  const classes = useStyles();\n\n  return (\n    <footer className={classes.footer}>\n      <Typography\n        variant=\"body2\"\n        align=\"center\"\n        color=\"textSecondary\"\n        component=\"p\"\n      >\n        By Thiago Antonius\n      </Typography>\n    </footer>\n  );\n}\n","import { AppBar, IconButton, Toolbar, Typography, Button } from '@material-ui/core';\nimport HomeIcon from '@material-ui/icons/Home';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport useStyles from 'styles';\n\nexport function NavigationBar() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <IconButton color=\"inherit\" component={Link} to=\"/\" className={classes.logoIcon} >\n          <HomeIcon />\n        </IconButton>\n        <Typography variant=\"h6\" color=\"inherit\" component={Link} to=\"/\" noWrap className={classes.title}>\n          Itau Test\n        </Typography>\n        <Button  color=\"inherit\" size=\"small\" component={Link} to=\"/\">\n            Estatisticas dos Usuários\n        </Button>\n        <Button color=\"inherit\" size=\"small\" component={Link} to=\"/tweets\">\n            Estatisticas dos Tweets\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { AppRouter } from 'AppRouter';\nimport { Footer } from 'components/Footer';\nimport { NavigationBar } from 'components/NavigationBar';\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport useStyles from 'styles';\nimport './App.css';\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Router>\n        <CssBaseline />\n        <NavigationBar></NavigationBar>\n        <main>\n          <Container className={classes.mainContainer} maxWidth=\"lg\">\n            <AppRouter></AppRouter>\n          </Container>\n        </main>\n        <Footer></Footer>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}